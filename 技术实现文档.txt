# 基于开源AI大模型的教学实训智能体软件 - 技术实现文档

## 一、项目概述

### 1.1 项目背景
本项目旨在开发一个基于开源大模型的教学实训智能体软件，通过AI技术提升教学效率和学习效果。

### 1.2 技术架构
- 后端：
  - Java: OpenJDK 1.8.0_292
  - Spring Boot: 2.7.18
  - Spring Cloud: 2021.0.8
  - MyBatis-Plus: 3.5.3.1
  - Maven: 3.9.9
- 前端：
  - Vue 3.3.x
  - Element Plus 2.4.x
  - Node.js 16+
- 数据库：MySQL 8.0+
- 缓存：Redis 6.0+
- AI模型：开源大模型（如ChatGLM等）

## 二、系统架构设计

### 2.1 整体架构
```
客户端层：Web浏览器
↓
表现层：Vue3 + Element Plus
↓
网关层：Spring Gateway
↓
应用层：Spring Boot 微服务
↓
持久层：MySQL + Redis
↓
AI模型层：开源大模型
```

### 2.2 核心模块
1. 用户认证模块
2. 课程管理模块
3. 智能备课模块
4. 在线练习模块
5. 学情分析模块
6. AI问答模块

## 三、数据库设计

### 3.1 数据库环境
- 类型：MySQL 8.0+
- 字符集：utf8mb4
- 排序规则：utf8mb4_general_ci

### 3.2 表结构设计

#### 3.2.1 用户表(sys_user)
```sql
CREATE TABLE `sys_user` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `username` varchar(50) NOT NULL COMMENT '用户名',
  `password` varchar(100) NOT NULL COMMENT '密码',
  `real_name` varchar(50) COMMENT '真实姓名',
  `email` varchar(100) COMMENT '邮箱',
  `phone` varchar(20) COMMENT '手机号',
  `role` varchar(20) NOT NULL COMMENT '角色：ADMIN/TEACHER/STUDENT',
  `status` tinyint(1) DEFAULT 1 COMMENT '状态：0-禁用，1-启用',
  `avatar` varchar(255) COMMENT '头像URL',
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` tinyint(1) DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户表';
```

[其他表结构设计详见数据库设计文档]

## 四、核心功能实现

### 4.1 用户认证模块

#### 4.1.1 JWT认证实现
```java
@Configuration
public class JwtConfig {
    @Value("${jwt.secret}")
    private String secret;
    
    @Value("${jwt.expiration}")
    private Long expiration;
    
    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("username", userDetails.getUsername());
        claims.put("created", new Date());
        return generateToken(claims);
    }
    
    private String generateToken(Map<String, Object> claims) {
        return Jwts.builder()
                .setClaims(claims)
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(SignatureAlgorithm.HS512, secret)
                .compact();
    }
}
```

### 4.2 AI模型集成

#### 4.2.1 AI服务接口
```java
@Service
public class AIService {
    @Autowired
    private AIModelClient aiModelClient;
    
    public String generateLessonPlan(String courseOutline) {
        return aiModelClient.generateContent(
            "lesson_plan",
            Map.of("outline", courseOutline)
        );
    }
    
    public ExerciseAnalysis analyzeAnswer(String studentAnswer, String standardAnswer) {
        return aiModelClient.analyzeContent(
            "exercise_analysis",
            Map.of(
                "student_answer", studentAnswer,
                "standard_answer", standardAnswer
            )
        );
    }
}
```

### 4.3 实时练习评测

#### 4.3.1 练习评测服务
```java
@Service
public class ExerciseService {
    @Autowired
    private AIService aiService;
    
    @Autowired
    private ExerciseMapper exerciseMapper;
    
    public AnswerResult evaluateAnswer(AnswerSubmission submission) {
        Exercise exercise = exerciseMapper.selectById(submission.getExerciseId());
        
        // 使用AI评估答案
        ExerciseAnalysis analysis = aiService.analyzeAnswer(
            submission.getAnswer(),
            exercise.getStandardAnswer()
        );
        
        // 保存评估结果
        saveAnalysisResult(submission, analysis);
        
        return AnswerResult.builder()
            .score(analysis.getScore())
            .feedback(analysis.getFeedback())
            .suggestions(analysis.getSuggestions())
            .build();
    }
}
```

## 五、前端实现

### 5.1 项目结构
```
src/
├── api/          # API接口
├── assets/       # 静态资源
├── components/   # 公共组件
├── router/       # 路由配置
├── store/        # 状态管理
├── styles/       # 样式文件
├── utils/        # 工具函数
└── views/        # 页面组件
```

### 5.2 核心组件示例

#### 5.2.1 练习编辑器组件
```vue
<template>
  <div class="exercise-editor">
    <el-form :model="form" label-width="120px">
      <el-form-item label="题目类型">
        <el-select v-model="form.type">
          <el-option label="编程题" value="PROGRAMMING" />
          <el-option label="选择题" value="CHOICE" />
          <el-option label="问答题" value="ESSAY" />
        </el-select>
      </el-form-item>
      
      <el-form-item label="题目内容">
        <el-input
          type="textarea"
          v-model="form.content"
          :rows="4"
        />
      </el-form-item>
      
      <el-form-item label="参考答案">
        <el-input
          type="textarea"
          v-model="form.answer"
          :rows="4"
        />
      </el-form-item>
    </el-form>
  </div>
</template>

<script setup>
import { ref } from 'vue'

const form = ref({
  type: '',
  content: '',
  answer: ''
})
</script>
```

## 六、部署说明

### 6.1 环境要求
- JDK: OpenJDK 1.8.0_292
- Maven: 3.9.9
- MySQL 8.0+
- Redis 6.0+
- Node.js 16+

### 6.2 部署步骤

#### 6.2.1 后端部署
1. 配置pom.xml
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>ai-teaching</artifactId>
    <version>1.0.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.18</version>
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <spring-cloud.version>2021.0.8</spring-cloud.version>
        <mybatis-plus.version>3.5.3.1</mybatis-plus.version>
        <jwt.version>0.9.1</jwt.version>
        <hutool.version>5.8.21</hutool.version>
    </properties>

    <dependencies>
        <!-- Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>${mybatis-plus.version}</version>
        </dependency>

        <!-- JWT -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>${jwt.version}</version>
        </dependency>

        <!-- MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.33</version>
        </dependency>

        <!-- Hutool -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
```

2. 配置application.yml
```yaml
server:
  port: 8080

spring:
  application:
    name: ai-teaching
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ai_teaching?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
    password: your_password
  redis:
    host: localhost
    port: 6379
    database: 0
    
mybatis-plus:
  mapper-locations: classpath*:/mapper/**/*.xml
  type-aliases-package: com.example.entity
  configuration:
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      logic-delete-field: is_deleted
      logic-delete-value: 1
      logic-not-delete-value: 0

jwt:
  secret: your-secret-key
  expiration: 86400000  # 24小时

ai:
  model:
    url: http://your-ai-model-url
    api-key: your-api-key

logging:
  level:
    com.example: debug
```

#### 6.2.2 前端部署
1. 安装依赖
```bash
npm install
```

2. 打包
```bash
npm run build
```

3. 部署到Nginx
```nginx
server {
    listen 80;
    server_name your-domain.com;

    location / {
        root /path/to/dist;
        try_files $uri $uri/ /index.html;
    }

    location /api {
        proxy_pass http://localhost:8080;
    }
}
```

## 七、安全配置

### 7.1 Spring Security配置
```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .and()
            .authorizeRequests()
            .antMatchers("/api/auth/**").permitAll()
            .anyRequest().authenticated()
            .and()
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
    }
}
```

### 7.2 跨域配置
```java
@Configuration
public class CorsConfig {
    @Bean
    public CorsFilter corsFilter() {
        CorsConfiguration config = new CorsConfiguration();
        config.addAllowedOrigin("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        
        return new CorsFilter(source);
    }
}
```

## 八、监控与日志

### 8.1 接口日志切面
```java
@Aspect
@Component
public class WebLogAspect {
    @Pointcut("execution(public * com.example.controller.*.*(..))")
    public void webLog() {}
    
    @Around("webLog()")
    public Object doAround(ProceedingJoinPoint joinPoint) throws Throwable {
        // 记录请求信息
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        
        // 打印请求相关参数
        log.info("========================================== Start ==========================================");
        log.info("URL            : {}", request.getRequestURL().toString());
        log.info("HTTP Method    : {}", request.getMethod());
        log.info("Class Method   : {}.{}", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());
        log.info("IP            : {}", request.getRemoteAddr());
        log.info("Request Args   : {}", new Gson().toJson(joinPoint.getArgs()));
        
        Object result = joinPoint.proceed();
        
        // 处理完请求，返回内容
        log.info("Response Args  : {}", new Gson().toJson(result));
        log.info("=========================================== End ===========================================");
        
        return result;
    }
}
```

## 九、性能优化

### 9.1 缓存配置
```java
@Configuration
@EnableCaching
public class RedisConfig {
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(factory);
        
        // 配置序列化方式
        Jackson2JsonRedisSerializer<Object> serializer = new Jackson2JsonRedisSerializer<>(Object.class);
        ObjectMapper mapper = new ObjectMapper();
        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        serializer.setObjectMapper(mapper);
        
        template.setValueSerializer(serializer);
        template.setKeySerializer(new StringRedisSerializer());
        template.afterPropertiesSet();
        
        return template;
    }
}
```

### 9.2 数据库优化
1. 添加必要索引
2. 使用分页查询
3. 实现读写分离
4. 配置数据库连接池

## 十、测试策略

### 10.1 单元测试
```java
@SpringBootTest
public class UserServiceTest {
    @Autowired
    private UserService userService;
    
    @Test
    public void testCreateUser() {
        UserDTO userDTO = new UserDTO();
        userDTO.setUsername("test");
        userDTO.setPassword("123456");
        userDTO.setRole("STUDENT");
        
        User user = userService.createUser(userDTO);
        
        assertNotNull(user);
        assertEquals("test", user.getUsername());
        assertEquals("STUDENT", user.getRole());
    }
}
```

### 10.2 接口测试
```java
@SpringBootTest
@AutoConfigureMockMvc
public class UserControllerTest {
    @Autowired
    private MockMvc mockMvc;
    
    @Test
    public void testLogin() throws Exception {
        LoginDTO loginDTO = new LoginDTO();
        loginDTO.setUsername("test");
        loginDTO.setPassword("123456");
        
        mockMvc.perform(post("/api/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(new ObjectMapper().writeValueAsString(loginDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.token").exists());
    }
}
```

## 十一、项目进度计划

### 第一阶段：基础架构搭建（2周）
- 项目初始化
- 数据库设计
- 基础框架搭建
- 用户认证实现

### 第二阶段：核心功能开发（4周）
- AI模型集成
- 智能备课功能
- 在线练习系统
- 实时评测功能

### 第三阶段：数据分析与优化（2周）
- 学情分析
- 教学效率分析
- 系统优化

### 第四阶段：测试与部署（2周）
- 单元测试
- 接口测试
- 性能测试
- 系统部署
